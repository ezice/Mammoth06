# -*- coding: utf-8 -*-
"""Basic Movie Recommender System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hG7xi7duSuN6hVrTidOvfAqv02DP6GVs

https://colab.research.google.com/

Data Download Link: https://files.grouplens.org/datasets/movielens/ml-latest-small.zip

Data Source: https://grouplens.org/datasets/movielens/latest/
"""

'''
@article{10.1145/2827872,
author = {Harper, F. Maxwell and Konstan, Joseph A.},
title = {The MovieLens Datasets: History and Context},
year = {2015},
issue_date = {January 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {4},
issn = {2160-6455},
url = {https://doi.org/10.1145/2827872},
doi = {10.1145/2827872},
journal = {ACM Trans. Interact. Intell. Syst.},
month = dec,
articleno = {19},
numpages = {19},
keywords = {Datasets, recommendations, ratings, MovieLens}
}
'''

import pandas

ratings_dataframe = pandas.read_csv("ratings.csv" )

ratings_dataframe

FIRST_INDEX_ROW = 0

ratings_dataframe = ratings_dataframe.drop(ratings_dataframe.index[FIRST_INDEX_ROW])

ratings_dataframe

ratings_dataframe.info()

ratings_dataframe = ratings_dataframe.astype("float")

ratings_dataframe.info()

ratings_dataframe

movies_dataframe = pandas.read_csv("movies.csv")

movies_dataframe

movies_dataframe.info()

movie_titles_dataframe = movies_dataframe[["movieId", "title"]]

movie_titles_dataframe

movie_titles_dataframe.info()

movie_titles_dataframe["movieId"] = movie_titles_dataframe["movieId"].astype(str).astype(float)

movie_titles_dataframe.info()

ratings_dataframe.info()

merged_dataframe = pandas.merge(ratings_dataframe, movie_titles_dataframe, on = "movieId")

merged_dataframe

merged_dataframe.groupby("movieId")["rating"].count().sort_values(ascending = False)

crosstab = merged_dataframe.pivot_table(values  = "rating",
                                        index   = "userId",
                                        columns = "title",
                                        fill_value = 0)

crosstab

X = crosstab.T

X

from sklearn.decomposition import TruncatedSVD

NUMBER_OF_COMPONENTS = 12

singular_value_decomposition = TruncatedSVD(n_components = NUMBER_OF_COMPONENTS,
                                            random_state = 1)

matrix = singular_value_decomposition.fit_transform(X)

matrix

import numpy

correlation_matrix = numpy.corrcoef(matrix)

correlation_matrix